1.dex字节码与class字节码的区别?
本质上是一样的，class文件存在很多冗余信息，dex会去除冗余并整合。
一个class就是一个文件，而dex会把多个class和内容抽出来合并成一个dex文件，以减少io操作
dex文件的大致结构：
常量池：存放所有class的常量
类定义：类名，访问标志
Data：实例变量，方法
class是由jvm执行的，而dex是由dvm或ART执行的

2.jvm与dvm的主要区别
jvm是基于堆栈的，dvm是基于寄存器的
基于寄存器的虚拟机可以用更少的指令条数完成相同的cpu操作，性能更高

3.dvm与ART的主要区别
dvm在每次运行时，都需要将字节码转换成机器码(通过JIT)，性能很低
ART会在安装时，将字节码预编译成机器码(通过AOT)，这样运行时就不用编译了，但是安装时间更长，占用的存储空间更大

4.java类的生命周期
加载：通过类的全限类名找到class文件并加载到内存中，然后在方法区创建相应的数据结构，最后生成一个大Class对象，作为方法区该数据结构的访问入口
验证：验证class文件是否符合虚拟机的要求，不会危害虚拟机安全。分为：文件格式验证；元数据验证；字节码验证；符号引用验证。ps：该阶段可以关闭
准备：为类变量分配内存，并设置初始值(0, null, false等)。ps：如果是 static final 的静态属性，则设置的就是赋的值
解析：将符号引用转化为直接引用。
        符号引用可以是任何形式的字面量，只要保证能无歧义的定位到要找的目标即可，因为编译期是不知道类的实际内存地址的
        直接引用是指向目标的指针，或偏移量，或定位到目标的句柄
初始化：执行类的初始化方法(clinit()方法)，编译器会按顺序将静态变量的赋值，静态代码块的内容合并起来组成clinit()方法
使用：
卸载：

5.什么是类的加载器，分为哪几种
执行 '通过类的全限类名找到指定二进制文件' 流程的代码模块叫做类加载器
BootStrap类加载器：负责加载指定目录下(JAVA_HOME/lib和-Xbootclasspath指定的目录)且被jvm识别的类库
Extension类加载器：负责加载JAVA_HOME/ext和java.ext.dirs系统变量执行的目录下的所有类库
Application类加载器：负责加载classPath下的所有类库，是程序的默认类加载器

6.什么是类的双亲委派机制，好处是什么
当某类加载器需要加载一个类时，首先将该加载委派给其父加载器加载，只有父加载器无法加载时才会自己加载
好处是：安全及防止内存中出现多份相同全限类名的字节码

























1.dex字节码与class字节码的区别?

2.jvm与dvm的主要区别

3.dvm与ART的主要区别

4.java类的生命周期